// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SWIMMER_SPECIES_H_
#define FLATBUFFERS_GENERATED_SWIMMER_SPECIES_H_

#include "flatbuffers/flatbuffers.h"

namespace SpeciesBuffer {

struct swimmer;
struct swimmerBuilder;

struct goal;
struct goalBuilder;

struct swimmer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef swimmerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TORQUE = 4,
    VT_FORCE = 6
  };
  float torque() const {
    return GetField<float>(VT_TORQUE, 0.0f);
  }
  float force() const {
    return GetField<float>(VT_FORCE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_TORQUE) &&
           VerifyField<float>(verifier, VT_FORCE) &&
           verifier.EndTable();
  }
};

struct swimmerBuilder {
  typedef swimmer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_torque(float torque) {
    fbb_.AddElement<float>(swimmer::VT_TORQUE, torque, 0.0f);
  }
  void add_force(float force) {
    fbb_.AddElement<float>(swimmer::VT_FORCE, force, 0.0f);
  }
  explicit swimmerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  swimmerBuilder &operator=(const swimmerBuilder &);
  flatbuffers::Offset<swimmer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<swimmer>(end);
    return o;
  }
};

inline flatbuffers::Offset<swimmer> Createswimmer(
    flatbuffers::FlatBufferBuilder &_fbb,
    float torque = 0.0f,
    float force = 0.0f) {
  swimmerBuilder builder_(_fbb);
  builder_.add_force(force);
  builder_.add_torque(torque);
  return builder_.Finish();
}

struct goal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef goalBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIST = 4,
    VT_ANGLE = 6
  };
  float dist() const {
    return GetField<float>(VT_DIST, 0.0f);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_DIST) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           verifier.EndTable();
  }
};

struct goalBuilder {
  typedef goal Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dist(float dist) {
    fbb_.AddElement<float>(goal::VT_DIST, dist, 0.0f);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(goal::VT_ANGLE, angle, 0.0f);
  }
  explicit goalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  goalBuilder &operator=(const goalBuilder &);
  flatbuffers::Offset<goal> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<goal>(end);
    return o;
  }
};

inline flatbuffers::Offset<goal> Creategoal(
    flatbuffers::FlatBufferBuilder &_fbb,
    float dist = 0.0f,
    float angle = 0.0f) {
  goalBuilder builder_(_fbb);
  builder_.add_angle(angle);
  builder_.add_dist(dist);
  return builder_.Finish();
}

}  // namespace Species

#endif  // FLATBUFFERS_GENERATED_SWIMMER_SPECIES_H_
